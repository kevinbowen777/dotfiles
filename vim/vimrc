

set nobackup
set nowritebackup
set nocompatible
set modelines=0
set nomodeline
" Don't persist options and mappings - may corrupt sessions.
set sessionoptions-=options
set shortmess+=c
set undofile
" set timeoutlen=500 ttimeoutlen=300
set updatetime=300
set encoding=utf-8
set t_Co=256
set showcmd
let mapleader = ","

let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/dotfiles/vim/'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/dotfiles/vim/bundle')

Plug 'pearofducks/ansible-vim'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'preservim/nerdtree'
Plug 'vim-syntastic/syntastic'
Plug 'vimwiki/vimwiki'
Plug 'ryanoasis/vim-devicons'
Plug 'tpope/vim-fugitive'
Plug 'xolox/vim-misc'
Plug 'xolox/vim-session'

call plug#end()

colorscheme murphy
syntax on
filetype plugin indent on
let python_highlight_all=1

" Appearance
set cmdheight=2
set colorcolumn=80
highlight ColorColumn ctermbg=DarkMagenta guibg=DarkMagenta
set laststatus=2
set linebreak
set relativenumber
" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes
set textwidth=78
set wrap

" Behavior
set backspace=indent,eol,start
set history=50
set hlsearch
set incsearch
set fileformat=unix

" Indentation
set autoindent
set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4

" Folding
set foldmethod=marker
nnoremap <space> za

" Tab-completion in command-line mode
set wildmode=full
set wildmenu

" Shortcut to rapidly toggle 'set list'
nnoremap <leader>l :set list!<CR>

" Source vimrc
nnoremap <leader>sv :source ~/.vimrc<CR>

" Use symbols for tabstops and EOLs
set listchars=tab:▸\ ,eol:¬

" Simplify moving between windows
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Disable arrow keys
for key in ['<Up>', '<Down>', '<Left>', '<Right>']
  exec 'noremap' key '<Nop>'
  exec 'inoremap' key '<Nop>'
  exec 'cnoremap' key '<Nop>'
  exec 'vnoremap' key '<Nop>'
endfor

" set highlight links in help
autocmd BufEnter * set conceallevel=0
autocmd BufEnter * hi link HelpBar Normal
autocmd BufEnter * hi link HelpStar Normal

" Temp file locations. Make sure subdirectories are created in ~/tmp
set undodir=~/tmp/.undo//
set backupdir=~/tmp/.backup//
set directory=~/tmp/.swp//

" ------------------------------------------------------------------------- "
"   Plugin Settings Section
" ------------------------------------------------------------------------- "
"{{{
" ------------------------------------------------------------------------- "
"   Ansible-vim Plugin Settings
" ------------------------------------------------------------------------- "
"{{{

let g:ansible_unindent_after_newline = 1
let g:ansible_attribute_highlight = "ob"
let g:ansible_name_highlight = 'b'
let g:ansible_extra_keywords_highlight = 1
let g:ansible_template_syntaxes = { '*.rb.j2': 'ruby' }

"}}}
" ------------------------------------------------------------------------- "
"   FZF Plugin Settings
" ------------------------------------------------------------------------- "
"{{{

let g:fzf_layout = { 'down': '40%'}
let $FZF_DEFAULT_COMMAND = 'rg --files --ignore-case --hidden -g "!{.git,.pyc}/*"'
command! -bang -nargs=? -complete=dir Files
     \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)

nnoremap <silent> <leader>f :Files<CR>
nnoremap <silent> <leader>g :GFiles<CR>
nnoremap <silent> <leader>s :Rg<CR>
" nnoremap <silent> <leader><space> :Buffers<CR>
" nnoremap <silent> <leader>A :Windows<CR>
" nnoremap <silent> <leader>l :BLines<CR>
" nnoremap <silent> <leader>o :BTags<CR>
" nnoremap <silent> <leader>t :Tags<CR>
" nnoremap <silent> <leader>? :History<CR>

"}}}
" ------------------------------------------------------------------------- "
"   NERDTree Plugin Settings
" ------------------------------------------------------------------------- "
"{{{

" load NerdFont
set guifont=DroidSansMono\ Nerd\ Font\ 11
let g:webdevicons_enable = 1
let g:webdevicons_enable_nerdtree = 1

" Toggle the NERD Tree on and off with F7
nmap <F7> :NERDTreeToggle<CR>

" Close the NERD Tree with Shift-F7
nmap <S-F7> :NERDTreeClose<CR>

" Show the bookmarks table on startup
let NERDTreeShowBookmarks=1

" Ignore displaying the following file types in NERDTree
let NERDTreeIgnore=[ '\.ncb$', '\.dummy$', '\.suo$', '\.vcproj\.RIMNET', '\.obj$',
                   \ '\.ilk$', '^BuildLog.htm$', '\.pdb$', '\.idb$',
                   \ '\.embed\.manifest$', '\.embed\.manifest.res$',
                   \  '\.intermediate\.manifest$', '^mt.deps' ]

map,r :NERDTreeFind<CR>

" Refresh the current folder if any changes
autocmd BufEnter NERD_tree_* | execute 'normal R'
au CursorHold * if exists("t:NerdTreeBufName") | call <SNR>15_refreshRoot() | endif

"Reload the window if directory is changed
augroup DIRCHANGE
    au!
    autocmd DirChanged global :NERDTreeCWD
augroup END

" Exit Vim if NERDTree is the only window remaining in the only tab.
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

" NERDTress File highlighting
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
exec 'autocmd FileType nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
exec 'autocmd FileType nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('config', 'green', 'none', 'green', '#151515')
call NERDTreeHighlightFile('conf', 'green', 'none', 'green', '#151515')
call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', '#151515')
call NERDTreeHighlightFile('py', 'blue', 'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('gitconfig', 'Gray', 'none', '#686868', '#151515')
call NERDTreeHighlightFile('gitignore', 'Gray', 'none', '#686868', '#151515')
call NERDTreeHighlightFile('bashrc', 'Gray', 'none', '#686868', '#151515')
call NERDTreeHighlightFile('bashprofile', 'Gray', 'none', '#686868', '#151515')

"}}}
" ------------------------------------------------------------------------- " 
"   Powerline Plugin Settings
" ------------------------------------------------------------------------- "
"{{{

set rtp+=~/.local/lib/python3.8/site-packages/powerline/bindings/vim/
set statusline+=%#warningmsg#
set statusline+=%{FugitiveStatusline()}
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
set showtabline=2 " Always display the tabline, even if there is only one tab.

"}}}
" ------------------------------------------------------------------------- " 
"   Syntastic Plugin Settings
" ------------------------------------------------------------------------- "
"{{{

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1
let g:syntastic_error_symbol = "✗"
let g:syntastic_warning_symbol = "⚠"
let g:syntastic_python_checkers = ['python', 'flake8', 'pep8', 'python3']

let g:syntastic_enable_perl_checker = 1
let g:syntastic_perl_checkers = ['perl', 'podchecker', 'perlcritic']

let g:syntastic_c_compiler = 'gcc'
let g:syntastic_c_config_file = '~/dotfiles/vim/vim_config_c'
let g:syntastic_check_header = 0
let g:syntastic_c_no_include_search = 1
let g:syntastic_c_auto_refresh_includes = 1

let g:syntastic_quiet_messages={'level':'warnings'}
let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': [],'passive_filetypes': ['.py'] }

nnoremap <leader>sc :SyntasticCheck<CR>
nnoremap <leader>st :SyntasticToggleMode<CR>
"nnoremap <C-w>E :SyntasticCheck<CR>

function! SyntasticCheckHook(errors)
	if !empty(a:errors)
		let g:syntastic_loc_list_height = min([len(a:errors), 5])
	endif
endfunction

"}}}
" ------------------------------------------------------------------------- "
"   VimSession Plugin Settings
" ------------------------------------------------------------------------- "
"{{{

let g:session_autosave = 'yes'
let g:session_autosave_periodic = 30

"}}}
" ------------------------------------------------------------------------- "
"   VimWiki Plugin Settings
" ------------------------------------------------------------------------- "
"{{{

let wiki = {}
let g:vimwikidir = $HOME . "/Dropbox/personal/administrativa/vimwiki"
let wiki.path = g:vimwikidir
let g:vimwiki_list=[wiki]

"}}}
"}}}

" Use the below highlight group when displaying bad whitespace is desired.
highlight BadWhitespace ctermbg=red guibg=red
" Display tabs at the beginning of a line in Python mode as bad.
au BufRead,BufNewFile *.py,*.pyw match BadWhitespace /^\t\+/
" Make trailing whitespace be flagged as bad.
 au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

" Automatically add headers to new bash, perl, and python files.
au bufnewfile *.sh 0r ~/dotfiles/vim/templates/bash_basic_header.template
au bufnewfile *.pl 0r ~/dotfiles/vim/templates/perl_basic_header.template
au bufnewfile *.py 0r ~/dotfiles/vim/templates/python_basic_header.template
au bufnewfile *.html 0r ~/dotfiles/vim/templates/html_boilerplate.template

autocmd FileType *.c,*.h setlocal expandtab shiftwidth=2 tabstop=2
autocmd FileType yaml setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType *.js setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType html setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
