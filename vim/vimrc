" ------------------------------------------------------------------------- "
"
" Name: .vimrc
" Purpose: Set vim configuration
" Requirements: vim-plug
"
" Version: 1.36
" Author: Kevin Bowen kevin.bowen@gmail.com
"
" Updated: 20240825
"
" ------------------------------------------------------------------------- "

set encoding=utf-8
set hidden
set modelines=0
set nobackup
set nocompatible
set nomodeline
set nowritebackup
set shortmess+=c
set showcmd
set t_Co=256
set termguicolors
set undofile
set updatetime=100

let mapleader = ","

" Load Plug
let data_dir = '~/dotfiles/vim/'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Load Plugins
call plug#begin('~/dotfiles/vim/bundle')

Plug 'dense-analysis/ale'
Plug 'godlygeek/tabular'
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'preservim/nerdtree'
Plug 'preservim/tagbar'
Plug 'preservim/vim-markdown'
Plug 'ryanoasis/vim-devicons'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-repeat'
Plug 'vimwiki/vimwiki'
Plug 'xolox/vim-misc'
Plug 'xolox/vim-session'

call plug#end()

" Customize colors
colorscheme murphy
func! s:my_colors_setup() abort
    hi Pmenu ctermfg=4 guifg=#000080 guibg=#808000 gui=NONE
    hi PmenuSel ctermfg=4 guifg=#000080 guibg=#b7c7b7 gui=NONE
    hi CocErrorSign ctermfg=4 guifg=#000080
    hi CocErrorFloat ctermfg=200 ctermbg=192 guifg=#ff00d7 guibg=#d7ff87
    hi PmenuSbar guibg=#bcbcbc
    hi PmenuThumb guibg=#585858
endfunc
 
augroup colorscheme_coc_setup | au!
    au ColorScheme * call s:my_colors_setup()
augroup END

let python_highlight_all=1
syntax on
filetype plugin indent on
" https://www.reddit.com/r/vim/wiki/where_to_put_filetype_specific_stuff
augroup my_filetypes
    autocmd!
    autocmd BufNewFile,BufRead *.c,*.h setlocal
        \ tabstop=2
        \ expandtab
        \ shiftwidth=2
    autocmd BufNewFile,BufRead *.js,*.html,*.css,*.tcss,*.yaml setlocal
        \ tabstop=2
        \ expandtab
        \ shiftwidth=2
        \ softtabstop=2
    autocmd BufNewFile,BufRead *.py setlocal
        \ tabstop=4
        \ softtabstop=4
        \ shiftwidth=4
        \ textwidth=88
        \ expandtab
        \ autoindent
        \ fileformat=unix
    autocmd BufNewFile,BufRead *.md set filetype=markdown
        \ tabstop=2
        \ expandtab
        \ shiftwidth=2
    au BufRead,BufNewFile *.tcss set filetype=css
augroup END


" Use the below highlight group when displaying bad whitespace is desired.
" See: https://alvinalexander.com/linux/vi-vim-editor-color-scheme-syntax/
highlight BadWhitespace ctermbg=DarkMagenta guibg=DarkMagenta

" Display tabs at the beginning of a line in Python mode as bad.
au BufNewFile,BufRead *.py,*.pyw match BadWhitespace /^\t\+/

" Make trailing whitespace be flagged as bad.
au BufNewFile,BufRead *.md,*.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

" Automatically add headers to new bash & perl files.
au BufNewFile *.sh 0r ~/dotfiles/vim/templates/bash_basic_header.template
au BufNewFile *.pl 0r ~/dotfiles/vim/templates/perl_basic_header.template

" Appearance
set cmdheight=2
set colorcolumn=79
highlight ColorColumn ctermbg=DarkMagenta guibg=DarkMagenta
set laststatus=2
set linebreak
set relativenumber
" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes
set textwidth=80
set wrap

" Behavior
set backspace=indent,eol,start
set history=50
set hlsearch
set incsearch
set fileformat=unix

" Possible Bugfix for gx
" See https://vi.stackexchange.com/questions/22459/gx-doesnt-open-the-url-and-complains-netrw-no-line-in-buffer/22505#22505
" Most likely just need to upgrade to a 9.x version
" nnoremap gx :!xdg-open <cWORD> &<CR><CR>

" Tab switching
nnoremap <C-Left> :tabprevious<CR>
nnoremap <C-Right> :tabnext<CR>
" Go to last active tab (Ctrl+L)
" Can also use g<Tab>
if !exists('g:lasttab')
  let g:lasttab = 1
endif
au TabLeave * let g:lasttab = tabpagenr()
nnoremap <Leader><C-L> :exe "tabn ".g:lasttab<CR>
vnoremap <Leader><C-L> :exe "tabn ".g:lasttab<CR>

" Indentation
set autoindent
set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4

" Folding
" set foldmethod=indent
" set foldmethod=marker
set foldnestmax=10
set foldenable
" set foldlevel=99
nnoremap <space> za

" Tab-completion in command-line mode
set wildmode=full
set wildmenu

" Shortcut to rapidly toggle 'set list'
nnoremap <leader>l :set list!<CR>

" Use symbols for tabstops and EOLs
set listchars=tab:▸\ ,eol:¬

" Source vimrc
" gvim does not auto reload powerline after source .vimrc
nnoremap <leader>sv :source ~/.vimrc \| py3 powerline.reload()<CR>

" Simplify moving between windows
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Toggle spellcheck functionality
:map <F5> :setlocal spell! spelllang=en_us<CR>

" Disable arrow keys
for key in ['<Up>', '<Down>', '<Left>', '<Right>']
  exec 'noremap' key '<Nop>'
  exec 'inoremap' key '<Nop>'
  exec 'cnoremap' key '<Nop>'
  exec 'vnoremap' key '<Nop>'
endfor

" set highlight links in help
autocmd BufEnter * set conceallevel=2
autocmd BufEnter * hi link HelpBar Normal
autocmd BufEnter * hi link HelpStar Normal

" Temp file locations. Make sure subdirectories are created in ~/tmp
set undodir=~/tmp/.undo//
set backupdir=~/tmp/.backup//
set directory=~/tmp/.swp//

" ------------------------------------------------------------------------- "
"   Plugin Settings Section
" ------------------------------------------------------------------------- "

" ------------------------------------------------------------------------- "
"   Ale Plugin Settings
" ------------------------------------------------------------------------- "

let g:ale_lint_on_text_changed = 0
let g:ale_lint_on_insert_leave = 1
let g:ale_lint_on_enter = 0
let g:ale_lint_on_filetype_changed = 0
let g:ale_lint_delay = 500
"
let g:ale_change_sign_column_color = 0
let g:ale_set_signs = 1
" let g:ale_linters = {'python': ['ruff']}
let g:ale_linters = {'python': ['pyright', 'flake8']}
" let g:ale_linters = {'python': ['pyright', 'flake8', 'ruff']}
let g:ale_linters_ignore = {'python': ['mypy', 'pylint']}
" let g:ale_linters_ignore = {'python': ['flake8', 'mypy', 'pylint']}
"
let g:ale_python_auto_poetry = 1
let g:ale_python_auto_virtualenv = 1
let g:ale_python_pyright_use_global = 1
let g:ale_python_pyright_config = {
\ 'python': {
\   'pythonPath': '',
\   'venvPath': '~/dev/python/venvs',
\ },
\}
let g:ale_python_ruff_auto_poetry = 1

nnoremap <leader>ad :ALEDisable<CR>
nnoremap <leader>ae :ALEEnable<CR>
nnoremap <leader>af :ALEFix<CR>
nnoremap <leader>ai :ALEInfo<CR>
nnoremap <leader>al :ALELint<CR>
nnoremap <leader>at :ALEToggle<CR>

" ------------------------------------------------------------------------- "
"  vim-session plugin settings
" ------------------------------------------------------------------------- "

" Don't save hidden and unloaded buffers in sessions.
set sessionoptions-=buffers
" Don't persist options and mappings because it can corrupt sessions.
set sessionoptions-=options

let g:session_default_to_last = "yes"

if has("gui_running")
    let g:session_default_name = "daily"
    let g:session_autosave = 'yes'
    let g:session_autosave_periodic = 30
    let g:session_autosave_silent = 1
    set sessionoptions+=resize
    set sessionoptions+=winpos
endif

let g:session_autoload = 'yes'
let g:session_command_aliases = 1

" ------------------------------------------------------------------------- "
"   COC coc.nvim Plugin Settings
" ------------------------------------------------------------------------- "

let g:coc_global_extensions = ['coc-html', 'coc-css', 'coc-json', 'coc-pyright', 'coc-tsserver']
let g:coc_user_config = {'diagnostic.checkCurrentLine': 1}
let g:coc_node_path='/home/kbowen/.config/nvm/versions/node/v19.8.1/bin/node'
let g:coc_disable_startup_warning = 1

autocmd FileType python let b:coc_root_patterns = ['.git', '.env', 'venv', '.venv', 'setup.cfg', 'setup.py', 'pyproject.toml', 'pyrightconfig.json']

" You have to remap <cr> to make it confirm completion.
inoremap <expr> <cr> coc#pum#visible() ? coc#pum#confirm() : "\<CR>"
" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"
"inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-@> coc#refresh()
" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> coc#pum#visible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
" nmap <silent> gi <Plug>(coc-implementation) Not implemented in pyright
" See: https://github.com/fannheyward/coc-pyright/issues/420#issuecomment-1347943845
nmap <silent> gi yiw:Rg <C-R>" <CR>
nmap <silent> gr <Plug>(coc-references)

" Refer to note above for gi - 20230722
command! -bang -nargs=* Rg
    \ call fzf#vim#grep('rg --column --line-number --no-heading --color=always --case-sensitive '
    \ . (len(<q-args>) > 0 ? <q-args> : '""'), 0,
    \ fzf#vim#with_preview({'options': ['--delimiter=:', '--nth=2..', '--layout=reverse', '--info=inline']}), <bang>0)

" Use K to show documentation in preview window.
nnoremap <silent> K :call ShowDocumentation()<CR>
"nnoremap <silent> K :call <SID>show_documentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent! call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Run the Code Lens action on the current line.
nmap <leader>cl  <Plug>(coc-codelens-action)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocActionAsync('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

" Personal coc.nvim modifications

" autocmd FileType python let b:coc_suggest_disable = 1
"augroup colorscheme_coc_setup | au!
"    au ColorScheme * call s:my_colors_setup()
"augroup END

" ------------------------------------------------------------------------- "
"   Fugitive Plugin Settings
" ------------------------------------------------------------------------- "
                                                                                 
nnoremap <leader>gs :Git status<CR>                                             
nnoremap <leader>ga :Git add .<CR>                                              
nnoremap <leader>gr :Git read<CR>                                               
nnoremap <leader>gw :Git write<CR>                                              
nnoremap <leader>gb :Git blame<CR>                                              
nnoremap <leader>gd :Gdiff<CR>                                                  
nnoremap <leader>gc :Git commit<CR>                                             
nnoremap <leader>ge :Gedit<CR>                                                  
nnoremap <leader>dg :diffget<CR>                                                
nnoremap <leader>dp :diffput<CR>                                                
nnoremap <leader>gl :Gclog<CR>                                                  
"nnoremap <silent> <leader>gp :silent Git push<CR>                              
nnoremap <silent> <leader>gp :silent Git push origin master<CR>                 
                                                                                  
" ------------------------------------------------------------------------- "
"   FZF Plugin Settings
" ------------------------------------------------------------------------- "

let g:fzf_layout = { 'down': '40%'}
" let $FZF_DEFAULT_COMMAND = 'rg --files --ignore-case --hidden -g "!{.git,.pyc}/*"'
let $FZF_DEFAULT_COMMAND='rg --files --hidden -g "!{.git,tmp,bundle,po,htmlcov,staticfiles,migrations,.ssh,.npm,.vscode,__pycache__,bundle,.mozilla,.ipython,.pip-audit-cache,.fzf,.dotnet,.cert,.dropbox,downloads,.cache,.dropbox-dist,.config}/*"'
command! -bang -nargs=? -complete=dir Files
     \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)

nnoremap <silent> <leader>f :Files<CR>
nnoremap <silent> <leader>g :GFiles<CR>
nnoremap <silent> <leader>s :Rg<CR>
" nnoremap <silent> <leader><space> :Buffers<CR>
" nnoremap <silent> <leader>A :Windows<CR>
" nnoremap <silent> <leader>l :BLines<CR>
" nnoremap <silent> <leader>o :BTags<CR>
" nnoremap <silent> <leader>t :Tags<CR>
" nnoremap <silent> <leader>? :History<CR>

" ------------------------------------------------------------------------- "
"   Powerline Plugin Settings
" ------------------------------------------------------------------------- "

set rtp+=/usr/local/lib/python2.7/dist-packages/powerline/bindings/vim/
" set rtp+=/usr/lib/python3/dist-packages/powerline/bindings/vim/
" set rtp+=~/.local/lib/python3.8/site-packages/powerline/bindings/vim/
" set statusline=%{FugitiveStatusline()}%f%m%r%h%w[%L][%{&ff}]%y[%p%%][%04l,%04v]
set statusline+=%#warningmsg#
set statusline+=%{FugitiveStatusline()}
set statusline+=%*
set statusline+=%{tagbar#currenttag([%f])}
" Always display the tabline, even if there is only one tab
set showtabline=2

" ------------------------------------------------------------------------- "
"   Vim-Markdown & Preview Plugin Settings
" ------------------------------------------------------------------------- "

" for normal mode
nmap <silent> <F9> <Plug>MarkdownPreview
" for insert mode
imap <silent> <F9> <Plug>MarkdownPreview

let g:vim_markdown_open_url_under_cursor = 1
let g:vim_markdown_follow_anchor = 1
" See: https://github.com/preservim/vim-markdown/issues/493#issuecomment-1876093874
let g:vim_markdown_anchorexpr = "'# ' .. substitute(v:anchor, '-', '[- ]', 'g') .. ' \*\\n\\c'"
" let g:vim_markdown_anchorexpr = "'<<'.v:anchor.'>>'"
let g:vim_markdown_conceallevel = 1
let g:vim_markdown_folding_style_pythonic = 1
let g:vim_markdown_folding_level = 6
let g:vim_markdown_new_list_item_indent = 2

let g:markdown_fenced_languages = ['bash=sh', 'css', 'django', 'html', 'python']

" Markdown-Preview configuration

" set to 1, nvim will open the preview window after entering the markdown buffer
" default: 0
let g:mkdp_auto_start = 0

" set to 1, the nvim will auto close current preview window when change
" from markdown buffer to another buffer
" default: 1
let g:mkdp_auto_close = 1

" set to 1, the vim will refresh markdown when save the buffer or
" leave from insert mode, default 0 is auto refresh markdown as you edit or
" move the cursor
" default: 0
let g:mkdp_refresh_slow = 0

" set to 1, the MarkdownPreview command can be use for all files,
" by default it can be use in markdown file
" default: 0
let g:mkdp_command_for_global = 0

" set to 1, preview server available to others in your network
" by default, the server listens on localhost (127.0.0.1)
" default: 0
let g:mkdp_open_to_the_world = 0

" use custom IP to open preview page
" useful when you work in remote vim and preview on local browser
" more detail see: https://github.com/iamcco/markdown-preview.nvim/pull/9
" default empty
let g:mkdp_open_ip = ''

" specify browser to open preview page
" for path with space
" valid: `/path/with\ space/xxx`
" invalid: `/path/with\\ space/xxx`
" default: ''
let g:mkdp_browser = '/usr/bin/firefox'

" set to 1, echo preview page url in command line when open preview page
" default is 0
let g:mkdp_echo_preview_url = 0

" a custom vim function name to open preview page
" this function will receive url as param
" default is empty
let g:mkdp_browserfunc = ''

" options for markdown render
" mkit: markdown-it options for render
" katex: katex options for math
" uml: markdown-it-plantuml options
" maid: mermaid options
" disable_sync_scroll: if disable sync scroll, default 0
" sync_scroll_type: 'middle', 'top' or 'relative', default value is 'middle'
"   middle: mean the cursor position alway show at the middle of the preview page
"   top: mean the vim top viewport alway show at the top of the preview page
"   relative: mean the cursor position alway show at the relative positon of the preview page
" hide_yaml_meta: if hide yaml metadata, default is 1
" sequence_diagrams: js-sequence-diagrams options
" content_editable: if enable content editable for preview page, default: v:false
" disable_filename: if disable filename header for preview page, default: 0
let g:mkdp_preview_options = {
    \ 'mkit': {},
    \ 'katex': {},
    \ 'uml': {},
    \ 'maid': {},
    \ 'disable_sync_scroll': 0,
    \ 'sync_scroll_type': 'middle',
    \ 'hide_yaml_meta': 1,
    \ 'sequence_diagrams': {},
    \ 'flowchart_diagrams': {},
    \ 'content_editable': v:false,
    \ 'disable_filename': 0,
    \ 'toc': {}
    \ }

" use a custom markdown style must be absolute path
" like '/Users/username/markdown.css' or expand('~/markdown.css')
let g:mkdp_markdown_css = ''

" use a custom highlight style must absolute path
" like '/Users/username/highlight.css' or expand('~/highlight.css')
let g:mkdp_highlight_css = ''

" use a custom port to start server or empty for random
let g:mkdp_port = ''

" preview page title
" ${name} will be replace with the file name
let g:mkdp_page_title = '「${name}」'

" recognized filetypes
" these filetypes will have MarkdownPreview... commands
let g:mkdp_filetypes = ['markdown']

" set default theme (dark or light)
" By default the theme is define according to the preferences of the system
let g:mkdp_theme = 'dark'

" ------------------------------------------------------------------------- "
"   NERDTree Plugin Settings
" ------------------------------------------------------------------------- "

" load NerdFont
" set guifont=DroidSansMono\ Nerd\ Font\ 12
set guifont=BitstreamVeraSansMono\ Nerd\ Font\ Mono\ 12
let g:webdevicons_enable = 1
let g:webdevicons_enable_nerdtree = 1

" Toggle the NERD Tree on and off with F7
nmap <F7> :NERDTreeToggle<CR>

" Close the NERD Tree with Shift-F7
nmap <S-F7> :NERDTreeClose<CR>

" Show the bookmarks table on startup
let NERDTreeShowBookmarks=1

" Show number of lines in files
" 20240829 - Seems to override file highlighting.
" let g:NERDTreeFileLines = 1

" Ignore displaying the following file types in NERDTree
let NERDTreeIgnore=[ '__pycache__',]

" map,r :NERDTreeFind<CR>

" Reload the NERDTree window when there is a change in directory structure
autocmd BufEnter NERD_tree_* | execute 'normal R'
au CursorHold * if exists("t:NerdTreeBufName") | call <SNR>15_refreshRoot() | endif

" Reload the NERDTree window if directory is changed
" NOTE: 20240829 - Not optimal. Leave empty buffer on session restore.
" augroup DIRCHANGE
"   au!
"   autocmd DirChanged global :NERDTreeCWD
" augroup END

" Exit Vim if NERDTree is the only window remaining in the only tab.
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | call feedkeys(":quit\<CR>:\<BS>") | endif
" Close the tab if NERDTree is the only window remaining in it.
autocmd BufEnter * if winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | call feedkeys(":quit\<CR>:\<BS>") | endif

" NERDTree File highlighting
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
  exec 'autocmd FileType nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
  exec 'autocmd FileType nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('config', 'green', 'none', 'green', '#151515')
call NERDTreeHighlightFile('conf', 'green', 'none', 'green', '#151515')
call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('tcss', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', '#151515')
call NERDTreeHighlightFile('py', 'blue', 'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('gitconfig', 'Gray', 'none', '#686868', '#151515')
call NERDTreeHighlightFile('gitignore', 'Gray', 'none', '#686868', '#151515')
call NERDTreeHighlightFile('bashrc', 'Gray', 'none', '#686868', '#151515')
call NERDTreeHighlightFile('bashprofile', 'Gray', 'none', '#686868', '#151515')

" ------------------------------------------------------------------------- "
"   Tagbar Plugin Settings & ctag customizations
" ------------------------------------------------------------------------- "
nmap <F8> :TagbarToggle<CR>

" Open tagbar automatically in C files, optional
autocmd FileType c call tagbar#autoopen(0)
" Open tagbar automatically in Python files, optional
autocmd FileType python call tagbar#autoopen(0)

map <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
map <A-]> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>

" ------------------------------------------------------------------------- "
"   VimWiki Plugin Settings
" ------------------------------------------------------------------------- "

let wiki = {}

let g:vimwikidir = $HOME . "/docs/vimwiki"
let wiki.path = g:vimwikidir
let g:vimwiki_global_ext = 0
let g:vimwiki_list=[wiki]
let g:vimwiki_list=[{'path': '~/docs/vimwiki/',
                   \ 'syntax': 'markdown',
                   \ 'ext': '.md'}]
" let g:vimwiki_syntax_list = {}
" let g:vimwiki_syntax_list['markdown'] = {}
" let g:vimwiki_syntax_list['markdown']['typeface'] = {'bold': [], 'italic': [], 'underline': [], 'bold_italic': [], 'code': [], 'del':  [], 'sup':  [], 'sub':  [], 'eq': []}
let g:vimwiki_url_maxsave=0


highlight VimwikiHeader1 guifg=#FF00FF
highlight VimwikiHeader2 guifg=#FF0000
highlight VimwikiHeader3 guifg=#FFFF00
highlight VimwikiHeader4 guifg=#00FFFF
highlight VimwikiHeader5 guifg=#FF00FF
highlight VimwikiHeader6 guifg=#FFF000
highlight VimwikiHeader7 guifg=#FFFF00

highlight htmlH1 guifg=#FF00FF
highlight htmlH2 guifg=#FF0000
highlight htmlH3 guifg=#FFFF00
highlight htmlH4 guifg=#00FFFF
highlight htmlH5 guifg=#FF00FF
highlight htmlH6 guifg=#FFF000
highlight htmlH7 guifg=#FFFF00

highlight markdownH1 guifg=#FF00FF
highlight markdownH2 guifg=#FF0000
highlight markdownH3 guifg=#FFFF00
highlight markdownH4 guifg=#00FFFF
highlight markdownH5 guifg=#FF00FF
highlight markdownH6 guifg=#FFF000
highlight markdownH7 guifg=#FFFF00
