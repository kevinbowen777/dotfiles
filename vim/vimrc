"{{{ ---------------------------------------------------------------------- "
"
" Name: .vimrc 
" Purpose: Set vim configuration
" Requirements:
"
" Version: 1.21
" Author: Kevin Bowen kevin.bowen@gmail.com
" 
" Updated: 20201225
"
" ------------------------------------------------------------------------- "
"}}}

set nobackup
set nowritebackup
set nocompatible
set modelines=0
set nomodeline
" Don't persist options and mappings because it can corrupt sessions.
set sessionoptions-=options
set shortmess+=c
set undofile
set timeoutlen=10 ttimeoutlen=0
set updatetime=300
set encoding=utf-8
set t_Co=256
set cmdheight=2

call plug#begin('~/dotfiles/vim/bundle')

Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'preservim/nerdtree'
Plug 'python-mode/python-mode'
Plug 'ryanoasis/vim-devicons'
Plug 'tpope/vim-fugitive'
Plug 'vimwiki/vimwiki'
Plug 'vim-syntastic/syntastic'
Plug 'xolox/vim-misc'
Plug 'xolox/vim-session'

call plug#end()

" Enable file type detection and do language-dependent indenting.
filetype off             
filetype plugin indent on " enable detection, plugins, indentation in one step
colorscheme murphy

" Switch syntax highlighting on
syntax on
let python_highlight_all=1

" Appearance
set relativenumber
set laststatus=2
set wrap
set linebreak
set textwidth=78
set colorcolumn=80

" Behavior
set backspace=indent,eol,start
set history=50
set hlsearch
set incsearch
set fileformat=unix

" Indentation
set autoindent
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab

" Folding
set foldmethod=marker
nnoremap <space> za

" Tab-completion in command-line mode
set wildmode=full
set wildmenu

" Shortcut to rapidly toggle 'set list'
nmap <leader>l :set list!<CR>

" Use symbols for tabstops and EOLs
set listchars=tab:▸\ ,eol:¬

" Simplify moving between windows
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Disable arrow keys
for key in ['<Up>', '<Down>', '<Left>', '<Right>']
  exec 'noremap' key '<Nop>'
  exec 'inoremap' key '<Nop>'
  exec 'cnoremap' key '<Nop>'
  exec 'vnoremap' key '<Nop>'
endfor

" set highlight links in help
autocmd BufEnter * set conceallevel=0                                                     
autocmd BufEnter * hi link HelpBar Normal                                                 
autocmd BufEnter * hi link HelpStar Normal

" Temp file locations. Make sure subdirectories are created in ~/tmp
set undodir=~/tmp/.undo//
set backupdir=~/tmp/.backup//
set directory=~/tmp/.swp//
" ------------------------------------------------------------------------- "
" All plugin settings
" ------------------------------------------------------------------------- "
"{{{
" ------------------------------------------------------------------------- "
"    NERDTree settings
" ------------------------------------------------------------------------- "
"{{{
" Toggle the NERD Tree on and off with F7
nmap <F7> :NERDTreeToggle<CR>

" Close the NERD Tree with Shift-F7
nmap <S-F7> :NERDTreeClose<CR>

" Show the bookmarks table on startup
let NERDTreeShowBookmarks=1

" Ignore displaying the following file types in NERDTree
let NERDTreeIgnore=[ '\.ncb$', '\.dummy$', '\.suo$', '\.vcproj\.RIMNET', '\.obj$',
                   \ '\.ilk$', '^BuildLog.htm$', '\.pdb$', '\.idb$',
                   \ '\.embed\.manifest$', '\.embed\.manifest.res$',
                   \  '\.intermediate\.manifest$', '^mt.deps' ]

map,r :NERDTreeFind<CR>

" Refresh the current folder if any changes
autocmd BufEnter NERD_tree_* | execute 'normal R'
au CursorHold * if exists("t:NerdTreeBufName") | call <SNR>15_refreshRoot() | endif

"Reload the window if directory is changed
augroup DIRCHANGE
    au!
    autocmd DirChanged global :NERDTreeCWD
augroup END

" Exit Vim if NERDTree is the only window remaining in the only tab.
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

" NERDTress File highlighting
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
exec 'autocmd FileType nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
exec 'autocmd FileType nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('config', 'green', 'none', 'green', '#151515')
call NERDTreeHighlightFile('conf', 'green', 'none', 'green', '#151515')
call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', '#151515')
call NERDTreeHighlightFile('py', 'blue', 'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('gitconfig', 'Gray', 'none', '#686868', '#151515')
call NERDTreeHighlightFile('gitignore', 'Gray', 'none', '#686868', '#151515')
call NERDTreeHighlightFile('bashrc', 'Gray', 'none', '#686868', '#151515')
call NERDTreeHighlightFile('bashprofile', 'Gray', 'none', '#686868', '#151515')

"}}}
" ------------------------------------------------------------------------- " 
"    Powerline settings
" ------------------------------------------------------------------------- "
"{{{
" set rtp+=/usr/local/lib/python2.7/dist-packages/powerline/bindings/vim/
"set rtp+=~/.local/lib/python3.10/site-packages/powerline/bindings/vim/
set rtp+=/usr/lib/python3.10/site-packages/powerline/bindings/vim/
set statusline+=%#warningmsg#
set statusline+=%{FugitiveStatusline()}
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
set showtabline=2 " Always display the tabline, even if there is only one tab.
"}}}
" ------------------------------------------------------------------------- " 
"    syntastic plugin settings
" ------------------------------------------------------------------------- "
"{{{
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1
let g:syntastic_error_symbol = "✗"
let g:syntastic_warning_symbol = "⚠"
let g:syntastic_python_checkers = ['python', 'flake8', 'pep8', 'python3']
let g:syntastic_enable_perl_checker = 1
let g:syntastic_perl_checkers = ['perl', 'podchecker', 'perlcritic']

let g:syntastic_c_compiler = 'gcc'
let g:syntastic_c_config_file = '~/dotfiles/vim/vim_config_c'
let g:syntastic_check_header = 0
let g:syntastic_c_no_include_search = 1
let g:syntastic_c_auto_refresh_includes = 1
let g:syntastic_quiet_messages={'level':'warnings'}
let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': [],'passive_filetypes': ['.py'] }
nnoremap <C-w>E :SyntasticCheck<CR>

function! SyntasticCheckHook(errors)
	if !empty(a:errors)
		let g:syntastic_loc_list_height = min([len(a:errors), 5])
	endif
endfunction
"}}}
" ------------------------------------------------------------------------- "
"    vimwiki plugin settings
" ------------------------------------------------------------------------- "
"{{{
let wiki = {}
let g:vimwikidir = $HOME . "/Dropbox/personal/administrativa/vimwiki"
let wiki.path = g:vimwikidir
let g:vimwiki_list=[wiki]
"}}}
" ------------------------------------------------------------------------- "
"    VimSession plugin settings
" ------------------------------------------------------------------------- "
"{{{
let g:session_autosave = 'yes'
let g:session_autosave_periodic = 30

"}}}
" ------------------------------------------------------------------------- "
"    python-mode plugin settings
" ------------------------------------------------------------------------- "
"{{{
let g:pymode = 1
let g:pymode_option = 1
let g:pymode_options_max_line_length = 79
let g:pymode_options_colorcolumn = 1
let g:pymode_quickfix_minheight = 3
let g:pymode_quickfix_maxheight = 6
let g:pymode_preview_height = &previewheight
let g:pymode_preview_position = 'botright'
let g:pymode_indent = 1
let g:pymode_motion = 1
let g:pymode_doc = 1
let g:pymode_doc_bind = 'K'
let g:pymode_lint_on_write = 0

"}}}
" ------------------------------------------------------------------------- "
"    FZF plugin settings
" ------------------------------------------------------------------------- "
"{{{
let g:fzf_layout = { 'down': '40%'}

" nnoremap <silent> <C-f> :Files<CR>
" nnoremap <silent> <C-r> :Rg<CR>

"}}}
" ------------------------------------------------------------------------- "
"    coc.nvim plugin settings
" ------------------------------------------------------------------------- "
"{{{
" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
  set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
  inoremap <silent><expr> <c-@> coc#refresh()
" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Run the Code Lens action on the current line.
nmap <leader>cl  <Plug>(coc-codelens-action)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocActionAsync('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

" Personal coc.nvim modifications
" autocmd FileType python let b:coc_suggest_disable = 1

"}}}
"}}}

" load NerdFont
set guifont=DroidSansMono\ Nerd\ Font\ 11
let g:webdevicons_enable = 1
let g:webdevicons_enable_nerdtree = 1

" Use the below highlight group when displaying bad whitespace is desired.
highlight BadWhitespace ctermbg=red guibg=red
" Display tabs at the beginning of a line in Python mode as bad.
au BufRead,BufNewFile *.py,*.pyw match BadWhitespace /^\t\+/
" Make trailing whitespace be flagged as bad.
 au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

" Automatically add headers to new bash, perl, and python files.
au bufnewfile *.sh 0r ~/dotfiles/vim/templates/bash_basic_header.template
au bufnewfile *.pl 0r ~/dotfiles/vim/templates/perl_basic_header.template
" au bufnewfile *.py 0r ~/dotfiles/vim/templates/python_basic_header.template
au bufnewfile *.html 0r ~/dotfiles/vim/templates/html_boilerplate.template

autocmd FileType *.c,*.h setlocal expandtab shiftwidth=2 tabstop=2
autocmd FileType yaml setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType *.js setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType html setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
