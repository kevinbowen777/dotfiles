"{{{ ---------------------------------------------------------------------- "   
"                                                                               
" Name: .vimrc                                                                  
" Purpose: Set vim configuration                                                
" Requirements: vim-plug                                                        
"                                                                               
" Version: 1.25                                                                 
" Author: Kevin Bowen kevin.bowen@gmail.com                                     
"                                                                               
" Updated: 20230405
"                                                                               
" ------------------------------------------------------------------------- "   
"}}}

set nobackup
set nowritebackup
set nocompatible
set modelines=0
set nomodeline
" set cursorline
" Don't persist options and mappings - may corrupt sessions.
set sessionoptions-=options
set shortmess+=c
set undofile
" set timeoutlen=500 ttimeoutlen=300
set updatetime=100
set encoding=utf-8
set t_Co=256
set hidden
set termguicolors
set showcmd
let mapleader = ","

let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/dotfiles/vim/'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/dotfiles/vim/bundle')

Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'preservim/nerdtree'
Plug 'python-mode/python-mode', { 'for': 'python', 'branch': 'develop' }
Plug 'vim-syntastic/syntastic'
Plug 'vimwiki/vimwiki'
Plug 'ryanoasis/vim-devicons'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-repeat'
Plug 'xolox/vim-misc'
Plug 'xolox/vim-session'
Plug 'godlygeek/tabular'
Plug 'preservim/vim-markdown'
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd ~/dotfiles/vim/bundle/markdown-preview.nvim/app && yarn install' }

call plug#end()

colorscheme murphy
""" Customize colors
func! s:my_colors_setup() abort
    hi Pmenu ctermfg=4 guifg=#000080 guibg=#808000 gui=NONE
    hi PmenuSel ctermfg=4 guifg=#000080 guibg=#b7c7b7 gui=NONE
    hi CocErrorSign ctermfg=4 guifg=#000080
    hi CocErrorFloat ctermfg=200 ctermbg=192 guifg=#ff00d7 guibg=#d7ff87
    hi PmenuSbar guibg=#bcbcbc
    hi PmenuThumb guibg=#585858
endfunc
 
augroup colorscheme_coc_setup | au!
    au ColorScheme * call s:my_colors_setup()
augroup END

syntax on
filetype plugin indent on
let python_highlight_all=1

" Appearance
set cmdheight=2
set colorcolumn=80
highlight ColorColumn ctermbg=DarkMagenta guibg=DarkMagenta
set laststatus=2
set linebreak
set relativenumber
" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes
set textwidth=80
set wrap

" Behavior
set backspace=indent,eol,start
set history=50
set hlsearch
set incsearch
set fileformat=unix

" Possible Bugfix for gx
" See https://vi.stackexchange.com/questions/22459/gx-doesnt-open-the-url-and-complains-netrw-no-line-in-buffer/22505#22505
" Most likely just need to upgrade to a 9.x version
" nnoremap gx :!xdg-open <cWORD> &<CR><CR>

" Indentation
set autoindent
set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4

" Folding
" set foldmethod=indent
" set foldnestmax=10
" set nofoldenable
" set foldlevel=2
set foldmethod=marker
nnoremap <space> za

" Tab-completion in command-line mode
set wildmode=full
set wildmenu

" Shortcut to rapidly toggle 'set list'
nnoremap <leader>l :set list!<CR>

" Source vimrc
nnoremap <leader>sv :source ~/.vimrc<CR>

" Use symbols for tabstops and EOLs
set listchars=tab:▸\ ,eol:¬

" Simplify moving between windows
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Disable arrow keys
for key in ['<Up>', '<Down>', '<Left>', '<Right>']
  exec 'noremap' key '<Nop>'
  exec 'inoremap' key '<Nop>'
  exec 'cnoremap' key '<Nop>'
  exec 'vnoremap' key '<Nop>'
endfor

" set highlight links in help
autocmd BufEnter * set conceallevel=2
autocmd BufEnter * hi link HelpBar Normal
autocmd BufEnter * hi link HelpStar Normal

" Temp file locations. Make sure subdirectories are created in ~/tmp
set undodir=~/tmp/.undo//
set backupdir=~/tmp/.backup//
set directory=~/tmp/.swp//

" ------------------------------------------------------------------------- "
"   Plugin Settings Section
" ------------------------------------------------------------------------- "
"{{{
" ------------------------------------------------------------------------- "
"   COC coc.nvim Plugin Settings
" ------------------------------------------------------------------------- "
"{{{

let g:coc_global_extensions = ['coc-html', 'coc-css', 'coc-json', 'coc-pyright', 'coc-tsserver']
let g:coc_user_config = {'diagnostic.checkCurrentLine': 1}
let g:coc_node_path='/home/kbowen/.config/nvm/versions/node/v19.8.1/bin/node'
let g:coc_disable_startup_warning = 1

" You have to remap <cr> to make it confirm completion.
inoremap <expr> <cr> coc#pum#visible() ? coc#pum#confirm() : "\<CR>"
" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"
"inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-@> coc#refresh()
" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> coc#pum#visible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call ShowDocumentation()<CR>
"nnoremap <silent> K :call <SID>show_documentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent! call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Run the Code Lens action on the current line.
nmap <leader>cl  <Plug>(coc-codelens-action)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocActionAsync('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

" Personal coc.nvim modifications
let g:coc_disable_startup_warning = 1
" autocmd FileType python let b:coc_suggest_disable = 1
"augroup colorscheme_coc_setup | au!
"    au ColorScheme * call s:my_colors_setup()
"augroup END

"}}}
" ------------------------------------------------------------------------- "   
"   Fugitive Plugin Settings                                                    
" ------------------------------------------------------------------------- "   
"{{{                                                                            
                                                                                 
nnoremap <leader>gs :Git status<CR>                                             
nnoremap <leader>ga :Git add .<CR>                                              
nnoremap <leader>gr :Git read<CR>                                               
nnoremap <leader>gw :Git write<CR>                                              
nnoremap <leader>gb :Git blame<CR>                                              
nnoremap <leader>gd :Gdiff<CR>                                                  
nnoremap <leader>gc :Git commit<CR>                                             
nnoremap <leader>ge :Gedit<CR>                                                  
nnoremap <leader>dg :diffget<CR>                                                
nnoremap <leader>dp :diffput<CR>                                                
nnoremap <leader>gl :Gclog<CR>                                                  
"nnoremap <silent> <leader>gp :silent Git push<CR>                              
nnoremap <silent> <leader>gp :silent Git push origin master<CR>                 
                                                                                  
"}}}
" ------------------------------------------------------------------------- "
"   FZF Plugin Settings
" ------------------------------------------------------------------------- "
"{{{

let g:fzf_layout = { 'down': '40%'}
" let $FZF_DEFAULT_COMMAND = 'rg --files --ignore-case --hidden -g "!{.git,.pyc}/*"'
let $FZF_DEFAULT_COMMAND='rg --files --hidden -g "!{.git,tmp,bundle,po,htmlcov,staticfiles,migrations,.ssh,.npm,.vscode,__pycache__,bundle,.mozilla,.ipython,.pip-audit-cache,.fzf,.dotnet,.cert,.dropbox,downloads,.cache,.dropbox-dist,.config}/*"'
command! -bang -nargs=? -complete=dir Files
     \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)

nnoremap <silent> <leader>f :Files<CR>
nnoremap <silent> <leader>g :GFiles<CR>
nnoremap <silent> <leader>s :Rg<CR>
" nnoremap <silent> <leader><space> :Buffers<CR>
" nnoremap <silent> <leader>A :Windows<CR>
" nnoremap <silent> <leader>l :BLines<CR>
" nnoremap <silent> <leader>o :BTags<CR>
" nnoremap <silent> <leader>t :Tags<CR>
" nnoremap <silent> <leader>? :History<CR>

"}}}
" ------------------------------------------------------------------------- "
"   NERDTree Plugin Settings
" ------------------------------------------------------------------------- "
"{{{

" load NerdFont
" set guifont=DroidSansMono\ Nerd\ Font\ 12
set guifont=BitstreamVeraSansMono\ Nerd\ Font\ Mono\ 12
let g:webdevicons_enable = 1
let g:webdevicons_enable_nerdtree = 1

" Toggle the NERD Tree on and off with F7
nmap <F7> :NERDTreeToggle<CR>

" Close the NERD Tree with Shift-F7
nmap <S-F7> :NERDTreeClose<CR>

" Show the bookmarks table on startup
let NERDTreeShowBookmarks=1

" Ignore displaying the following file types in NERDTree
let NERDTreeIgnore=[ '\.ncb$', '\.dummy$', '\.suo$', '\.vcproj\.RIMNET', '\.obj$',
                   \ '\.ilk$', '^BuildLog.htm$', '\.pdb$', '\.idb$',
                   \ '\.embed\.manifest$', '\.embed\.manifest.res$',
                   \  '\.intermediate\.manifest$', '^mt.deps' ]

map,r :NERDTreeFind<CR>

" Refresh the current folder if any changes
autocmd BufEnter NERD_tree_* | execute 'normal R'
au CursorHold * if exists("t:NerdTreeBufName") | call <SNR>15_refreshRoot() | endif

"Reload the window if directory is changed
augroup DIRCHANGE
    au!
    autocmd DirChanged global :NERDTreeCWD
augroup END

" Exit Vim if NERDTree is the only window remaining in the only tab.
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

" NERDTress File highlighting
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
exec 'autocmd FileType nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
exec 'autocmd FileType nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('config', 'green', 'none', 'green', '#151515')
call NERDTreeHighlightFile('conf', 'green', 'none', 'green', '#151515')
call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', '#151515')
call NERDTreeHighlightFile('py', 'blue', 'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('gitconfig', 'Gray', 'none', '#686868', '#151515')
call NERDTreeHighlightFile('gitignore', 'Gray', 'none', '#686868', '#151515')
call NERDTreeHighlightFile('bashrc', 'Gray', 'none', '#686868', '#151515')
call NERDTreeHighlightFile('bashprofile', 'Gray', 'none', '#686868', '#151515')

"}}}
" ------------------------------------------------------------------------- " 
"   Powerline Plugin Settings
" ------------------------------------------------------------------------- "
"{{{

set rtp+=/usr/local/lib/python2.7/dist-packages/powerline/bindings/vim/
" set rtp+=~/.local/lib/python3.8/site-packages/powerline/bindings/vim/
set statusline+=%#warningmsg#
set statusline+=%{FugitiveStatusline()}
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
set showtabline=2 " Always display the tabline, even if there is only one tab.

"}}}
" ------------------------------------------------------------------------- "
"   Python-mode Plugin Settings
" ------------------------------------------------------------------------- "
"{{{

let g:pymode = 1
let g:pymode_options = 1
let g:pymode_options_max_line_length = 79
let g:pymode_options_colorcolumn = 1
let g:pymode_quickfix_minheight = 3
let g:pymode_quickfix_maxheight = 6
let g:pymode_preview_height = &previewheight
let g:pymode_preview_position = 'botright'
let g:pymode_python = 'python3'
let g:pymode_indent = 1
let g:pymode_motion = 1
let g:pymode_doc = 1
let g:pymode_doc_bind = 'K'
let g:pymode_folding = 0
let g:pymode_lint = 0
let g:pymode_lint_on_write = 0
let g:pymode_syntax = 1
let g:pymode_syntax_all = 1
" :PymodeVirtualenv <path> - Activate
let g:pymode_virtualenv = 0
let g_pymode_virtualenv_path = "$HOME/dev/python/venvs"

"}}}
" ------------------------------------------------------------------------- " 
"   Syntastic Plugin Settings
" ------------------------------------------------------------------------- "
"{{{

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1
let g:syntastic_error_symbol = "✗"
let g:syntastic_warning_symbol = "⚠"
let g:syntastic_python_checkers = ['python', 'flake8', 'pep8', 'python3']

let g:syntastic_enable_perl_checker = 1
let g:syntastic_perl_checkers = ['perl', 'podchecker', 'perlcritic']

let g:syntastic_c_compiler = 'gcc'
let g:syntastic_c_config_file = '~/dotfiles/vim/vim_config_c'
let g:syntastic_check_header = 0
let g:syntastic_c_no_include_search = 1
let g:syntastic_c_auto_refresh_includes = 1

let g:syntastic_quiet_messages={'level':'warnings'}
let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': [],'passive_filetypes': ['.py'] }

nnoremap <leader>sc :SyntasticCheck<CR>
nnoremap <leader>st :SyntasticToggleMode<CR>
"nnoremap <C-w>E :SyntasticCheck<CR>

function! SyntasticCheckHook(errors)
	if !empty(a:errors)
		let g:syntastic_loc_list_height = min([len(a:errors), 5])
	endif
endfunction

"}}}
" ------------------------------------------------------------------------- "
"   VimSession Plugin Settings
" ------------------------------------------------------------------------- "
"{{{

let g:session_autosave = 'yes'
let g:session_autosave_periodic = 30
let g:session_autoload = 'no'

"}}}
" ------------------------------------------------------------------------- "
"   VimWiki Plugin Settings
" ------------------------------------------------------------------------- "
"{{{

let wiki = {}
" let g:vimwikidir = $HOME . "/Dropbox/personal/administrativa/vimwiki"
let g:vimwikidir = $HOME . "/docs/vimwiki"
let wiki.path = g:vimwikidir
" let g:vimwiki_list=[wiki]
let g:vimwiki_list=[{'path': '~/docs/vimwiki/',
                    \ 'syntax': 'markdown', 'ext': '.md'}]
let g:vimwiki_url_maxsave=0

highlight VimwikiHeader1 guifg=#FF00FF
highlight VimwikiHeader2 guifg=#FF0000
highlight VimwikiHeader3 guifg=#FFFF00
highlight VimwikiHeader5 guifg=#00FFFF
highlight VimwikiHeader4 guifg=#FF00FF
highlight VimwikiHeader6 guifg=#FFF000
highlight VimwikiHeader7 guifg=#FFFF00

highlight htmlH1 guifg=#FF00FF
highlight htmlH2 guifg=#FF0000
highlight htmlH3 guifg=#FFFF00
highlight htmlH4 guifg=#FF00FF
highlight htmlH5 guifg=#00FFFF
highlight htmlH6 guifg=#FFF000
highlight htmlH7 guifg=#FFFF00

"}}}
" ------------------------------------------------------------------------- "
"   Vim-Markdown & Preview Plugin Settings
" ------------------------------------------------------------------------- "
"{{{

let g:vim_markdown_open_url_under_cursor = 1
let g:vim_markdown_follow_anchor = 1
" let g:vim_markdown_conceallevel = 1
" let g:vim_markdown_folding_style_pythonic = 1

"Markdown-Preview configuration

" set to 1, nvim will open the preview window after entering the markdown buffer
" default: 0
let g:mkdp_auto_start = 0

" set to 1, the nvim will auto close current preview window when change
" from markdown buffer to another buffer
" default: 1
let g:mkdp_auto_close = 1

" set to 1, the vim will refresh markdown when save the buffer or
" leave from insert mode, default 0 is auto refresh markdown as you edit or
" move the cursor
" default: 0
let g:mkdp_refresh_slow = 0

" set to 1, the MarkdownPreview command can be use for all files,
" by default it can be use in markdown file
" default: 0
let g:mkdp_command_for_global = 0

" set to 1, preview server available to others in your network
" by default, the server listens on localhost (127.0.0.1)
" default: 0
let g:mkdp_open_to_the_world = 0

" use custom IP to open preview page
" useful when you work in remote vim and preview on local browser
" more detail see: https://github.com/iamcco/markdown-preview.nvim/pull/9
" default empty
let g:mkdp_open_ip = ''

" specify browser to open preview page
" for path with space
" valid: `/path/with\ space/xxx`
" invalid: `/path/with\\ space/xxx`
" default: ''
let g:mkdp_browser = '/usr/bin/firefox'

" set to 1, echo preview page url in command line when open preview page
" default is 0
let g:mkdp_echo_preview_url = 0

" a custom vim function name to open preview page
" this function will receive url as param
" default is empty
let g:mkdp_browserfunc = ''

" options for markdown render
" mkit: markdown-it options for render
" katex: katex options for math
" uml: markdown-it-plantuml options
" maid: mermaid options
" disable_sync_scroll: if disable sync scroll, default 0
" sync_scroll_type: 'middle', 'top' or 'relative', default value is 'middle'
"   middle: mean the cursor position alway show at the middle of the preview page
"   top: mean the vim top viewport alway show at the top of the preview page
"   relative: mean the cursor position alway show at the relative positon of the preview page
" hide_yaml_meta: if hide yaml metadata, default is 1
" sequence_diagrams: js-sequence-diagrams options
" content_editable: if enable content editable for preview page, default: v:false
" disable_filename: if disable filename header for preview page, default: 0
let g:mkdp_preview_options = {
    \ 'mkit': {},
    \ 'katex': {},
    \ 'uml': {},
    \ 'maid': {},
    \ 'disable_sync_scroll': 0,
    \ 'sync_scroll_type': 'middle',
    \ 'hide_yaml_meta': 1,
    \ 'sequence_diagrams': {},
    \ 'flowchart_diagrams': {},
    \ 'content_editable': v:false,
    \ 'disable_filename': 0,
    \ 'toc': {}
    \ }

" use a custom markdown style must be absolute path
" like '/Users/username/markdown.css' or expand('~/markdown.css')
let g:mkdp_markdown_css = ''

" use a custom highlight style must absolute path
" like '/Users/username/highlight.css' or expand('~/highlight.css')
let g:mkdp_highlight_css = ''

" use a custom port to start server or empty for random
let g:mkdp_port = ''

" preview page title
" ${name} will be replace with the file name
let g:mkdp_page_title = '「${name}」'

" recognized filetypes
" these filetypes will have MarkdownPreview... commands
let g:mkdp_filetypes = ['markdown']

" set default theme (dark or light)
" By default the theme is define according to the preferences of the system
let g:mkdp_theme = 'dark'

"}}}
"}}}

" Use the below highlight group when displaying bad whitespace is desired.
highlight BadWhitespace ctermbg=red guibg=red
" Display tabs at the beginning of a line in Python mode as bad.
au BufRead,BufNewFile *.py,*.pyw match BadWhitespace /^\t\+/
" Make trailing whitespace be flagged as bad.
 au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

" Automatically add headers to new bash, perl, and python files.
au bufnewfile *.sh 0r ~/dotfiles/vim/templates/bash_basic_header.template
au bufnewfile *.pl 0r ~/dotfiles/vim/templates/perl_basic_header.template
" au bufnewfile *.py 0r ~/dotfiles/vim/templates/python_basic_header.template
" au bufnewfile *.html 0r ~/dotfiles/vim/templates/html_boilerplate.template

" Quickly insert an empty new line without entering insert mode
" https://vi.stackexchange.com/a/29278/6196
" nnoremap <Leader>o o<Esc>0"_D
" nnoremap <Leader>O O<Esc>0"_D

autocmd FileType *.c,*.h setlocal expandtab shiftwidth=2 tabstop=2
autocmd FileType yaml setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType css setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType *.js setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType html setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
