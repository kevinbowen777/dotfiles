# .pythonstartup

# created: 20231129
# 
# adapted from: https://github.com/ambv/.dot_files/blob/master/pythonstartup
def autoimport(*modules):
    autoimported = set()
    for module in modules:
        if module.endswith(".*"):
            base = module[:-2]
            try:
                exec(
                    f"from {base} import *",
                    globals(),
                    globals(),
                )
            except ImportError:
                print(f"Failed to import {module}")
            autoimported.add(module)
        elif "." in module:
            base, name = module.rsplit(".", 1)
            try:
                exec(
                    f"from {base} import {name}",
                    globals(),
                    globals(),
                )
            except ImportError:
                print(f"Failed to import {module}")
            autoimported.add(name)
        else:
            try:
                exec(
                    f"import {module}",
                    globals(),
                    globals(),
                )
            except ImportError:
                print(f"Failed to import {module}")
            autoimported.add(module)

    print("Packages auto-imported for your convenience:")
    print(", ".join(sorted(autoimported)))


import os

if not os.environ.get("TESTING"):
    autoimport(
        "sys",
        "os",
        "re",
        "datetime",
        "time",
        # "asyncio",
        # "typing.*",
        "pathlib.Path",
        # "dataclasses.dataclass",
        "pprint.pp",
    )


# The following code pilfered from:
# https://treyhunner.com/2024/10/adding-keyboard-shortcuts-to-the-python-repl/

try:
    from _pyrepl.simple_interact import _get_reader
    from _pyrepl.commands import Command
except ImportError:
    pass  # Not in the new pyrepl OR _pyrepl implementation change.
else:
    cmds = {
        r"\C-n": "lucas = [2, 1, 3, 4, 7, 11, 18, 29]",
        r"\C-o": 'fruits = ["apples", "oranges", "bananas", "strawberries", "pears"]',
    }
    from textwrap import dedent
    reader = _get_reader()
    for n, (key, text) in enumerate(cmds.items(), start=1):
        name = f"CustomCommand{n}"
        exec(dedent(f"""
            class _cmds:
                class {name} (Command):
                    def do(self):
                        self.reader.insert({text!r})
                reader.commands[{name!r}] = {name}
                reader.bind({key!r}, {name!r})
        """))
    # Clean up all the new variables
del autoimport, _get_reader, Command, dedent, reader, cmds, text, key, name, _cmds, n


print("...Startup file loaded...")
