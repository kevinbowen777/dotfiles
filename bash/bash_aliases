#!/usr/bin/env bash

# ========================================================================= #
#   Section 1: Header
# ========================================================================= #
#
# Personal $HOME/.bash_aliases file
# Author: Kevin Bowen <kevin.bowen@gmail.com>
# Version: 3.0.13
# Source : http://codeberg.org/kevinbowen/dotfiles
# Last modified: 20250607
# ~/.bash_aliases: called by ~/.bashrc
#
#  Create symlink in ~/$HOME
#    ln -s ~/dotfiles/bash/bash_aliases ~/.bash_aliases
#
#       Sections
#
#  1. Header (This section)
#  2. Sourced aliases
#  3. Workstation aliases
#  4. Remote Server aliases
#  5. Custom Functions

# ========================================================================= #
#   Section 2: Sourced aliases and alias definitions.
# ========================================================================= #

# enable color support of ls
if [ -x /usr/bin/dircolors ]
then
    test -r ~/.dir_colors && eval "$(dircolors -b ~/.dir_colors)"
    alias ls='ls --color=auto'
    alias dir='dir --color'
    alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
else
    eval "$(dircolors -b)"
    # test -r ~/.dir_colors && eval "$(dircolors -b ~/.dir_colors)" || eval "$(dircolors -b)"
fi

#### Aliases
alias act='source .venv/bin/activate'
alias bat='bat --theme=Dracula'
alias batp='bat -p --theme=Dracula'
alias bashed='vi ~/.bashrc; source $HOME/.bashrc && echo "bashrc sourced  --ok."'
alias bestp='cd $HOME/docs/tech/best_practices'
alias cdoc='cdoc.sh'
alias cl='clear -x'
alias color=gcolor3
alias ctags='ctags --options=$HOME/.ctags'
alias deact='deactivate'
alias delenv='rm -rf .venv'
alias dict='sdcv'
alias djstart='cd ~/dev/python/repos/django/django-start'
alias djtree='tree -I "staticfiles|templates|__pycache__|htmlcov|static|media|docs|migrations|images"'
alias docs='cd $HOME/docs'
alias docu='docker compose up'
alias docd='docker compose down'
alias docnox='docker compose exec web nox'
alias docsh='cd $HOME/docs'
alias docstat='ps -ef | grep docker'
alias docub='docker compose up --build'
alias docup='docker compose exec web coverage run -m pytest'
alias docur='docker compose exec web coverage report'
alias docuh='docker compose exec web coverage html'
alias dot='cd $HOME/dotfiles'
alias dotf='cd ~/dotfiles'
alias drun='./drun'
alias ea='vi ~/.bash_aliases; source $HOME/.bash_aliases && echo "aliases sourced  --ok."'
alias ed='ed -p"â˜… > " --verbose'
alias egrep='egrep --color=auto'
alias etym='etym.py'
alias fd='fdfind'
alias fixkb='setxkbmap -option caps:escape'
alias fgrep='fgrep --color=auto'
alias fontfix='sudo fc-cache -vf'
alias fontfix_local='fc-cache -vf ~/.fonts'
alias fzf_update='cd ~/.config/fzf && git pull && ./install && cd -'
function ghic() { gh issue close "$1"; }
alias ghicb='gh issue create --label bug --assignee @me'
alias ghicd='gh issue create --label documentation --assignee @me'
alias ghice='gh issue create --label enhancement --assignee @me'
alias ghict='gh issue create --label testing --assignee @me'
function ghie() { gh issue edit "$1"; }
alias ghil='gh issue list --limit 100'
alias gits='git status'
alias gita='git add .'
alias gitl='git log'
alias gitp='git push all master;git push origin master'
alias gitpom='git push origin master'
alias grep='grep --color=auto'
function hist() { history | grep "$1"; }
alias howto='cd $HOME/docs/tech/howto'
alias info='pinfo'
alias ip='ip -color address'
alias ipb='/usr/sbin/ip -brief address'
alias ipr='/usr/sbin/ip route'
alias ipy='ipython3'
alias l='ls -CF'
alias la='ls -aF'
alias lh='ls -1 --hyperlink=always'
alias ll='ls -lF'
alias ls='ls --color -h --group-directories-first'
alias lsql='cd ~/dev/projects/learning/sql/'
alias matrix='gomuks'
alias meminfo='free -m -l -t'
alias mi='~/bin/map_it.py'
alias mpause='audtool --playback-pause'
alias mplay='audtool --playback-play'
alias mstop='audtool --playback-stop'
alias mlb='mlbscores.py'
alias mlbwest='mlb -s | head -n21 | tail -n6'
alias ms='~/bin/movie_search.py'
alias myip='curl myip.wtf && curl ipv4.text.myip.wtf && curl json.myip.wtf'
alias myip4='curl ipv4.text.myip.wtf'
alias myip6='curl myip.wtf'
alias newenv='python3.13 -m venv --prompt . .venv && .venv/bin/pip install -U pip setuptools wheel'
alias odin='cd ~/dev/projects/learning/odin-project/'
alias pd='perldoc'
alias pathdup='echo "$PATH" | tr : "\n" | sort | uniq -d'
alias pep='peplum'
alias pgstat='ps -ef | grep postgres'
alias pgstart='sudo systemctl start postgresql.service'
alias pgstop='sudo systemctl stop postgresql.service'
alias pip='python3 -m pip'
alias poetry_shell='eval $(poetry env activate)'
alias ports='netstat -tulanp'
alias proj='cd ~/dev/projects'
alias psc='ps xawf -eo pid,user,cgroup,args'
alias psmem='ps auxf | sort -nr -k -4'
alias psmem10='ps auxf | sort -nr -k -4 | head -10'
alias pscpu='ps auxf | sort -nr -k 3'
alias pscpu10='ps auxf | sort -nr -k 3 | head -10'
alias py='python'
alias pyenv_list='pyenv install --list | grep -E " 3\.([9]|1[0-4])"'
alias pymrun='python manage.py runserver'
alias pymrun+='python manage.py runserver_plus --cert-file cert.crt'
alias pydj='cd ~/dev/python/repos/django'
alias pyr='cd ~/dev/python/repos'
alias pysand='cd ~/dev/python/sandbox'
alias pysource='cd ~/dev/python/src/cpython'
alias pysrc='cd ~/dev/python/src/cpython'
alias pyth='cd ~/dev/python'
alias pytmp='cd ~/dev/python/tmp'
alias renlow='rename 'y/A-Z/a-z/''
alias renup='rename 'y/a-z/A-Z/''
alias rust_list='cargo install --list'
alias prsand='cd ~/dev/projects/sandbox'
alias rbsand='cd ~/dev/ruby/sandbox'
alias run='./run'
alias services='sudo systemctl list-units --type=service --state=running'
alias setkb='setxkbmap -option caps:escape'
alias sicp='cd ~/docs/learning/sicp'
alias sn='cd ~/.notes && ./sn.sh'
alias sourcea='source ~/.bash_aliases && echo bash_aliases sourced --ok'
alias sourceb='source ~/.bashrc && echo bashrc sourced --ok'
alias suf='sudo apt full-upgrade'
alias sug='sudo apt upgrade'
alias sup='sudo apt update'
alias sur='sudo apt autoremove'
alias toolbox='cd ~/dev/projects/repos/toolbox'
alias tools='cd ~/dev/projects/repos/toolbox'
alias trace='traceroute'
alias ts='~/bin/torrent_search.py'
alias venv='cd ~/dev/python/venvs'
alias venvs='cd ~/dev/python/venvs'
alias vi='/usr/bin/vim'
alias vimwik='vi ~/docs/vimwiki/index.md'
alias ws='~/bin/wiki_search.py'
alias xdis='xfce4-display-settings'
alias xfdev='cd ~/dev/xfce'
alias xfrepo='cd ~/dev/xfce/gitlab.xfce.org'

# ========================================================================= #
#   Section 3: Workstation aliases
# ========================================================================= #

# aliases for remote boxes

# ========================================================================= #
#   Section 4: Hardware control aliases(Control cd/dvd/scanners/audio/etc)
# ========================================================================= #

setxkbmap -option caps:escape
# volume controls
alias mu1='amixer sset Master 1%+'
alias md1='amixer sset Master 1%-'
alias mu5='amixer sset Master 5%+'
alias md5='amixer sset Master 5%-'
alias mu='amixer set Master 10%+'
alias md='amixer sset Master 10%-'

# ========================================================================= #
#   Section 5: Custom Functions (More of a function than an alias.. here)
# ========================================================================= #

edwin () {
    scheme -eval "(edit 'console)"
}
docstart () {
    sudo systemctl start containerd
    echo "containerd service started"
    sudo systemctl start docker.service
    echo "docker service started. Good morning, sunshine!"
}
docstop () {
    sudo systemctl stop docker.service
    echo "docker service stopped"
    sudo systemctl stop containerd
    echo "containerd service stopped. Good night, moon!"
}
hidden_python () {
    # https://til.simonwillison.net/python/stdlib-cli-tools
    PY_VERSION=$(python -V | awk '{print $2}')
    PY_MAJOR=${PY_VERSION::-5}
    cd "$HOME/.pyenv/versions/${PY_VERSION}/lib/python${PY_MAJOR}" || return
    rg 'if __name__ =' -l | grep -v \
        -e test \
        -e tests \
        -e idlelib \
        -e site-packages \
        -e turtledemo \
        | sort
}
mkcd () {
    mkdir -p -- "$1" && cd -P -- "$1" || return 
}
pybaseinstall () {
    python -m pip install --upgrade pip
    python -m pip install pipx
    python -m pip install rich
    # shellcheck source=/home/kbowen/.bashrc
    source "$HOME/.bashrc"
}
pipxpackageinstall () {
    pipx install argcomplete
    pipx install frogmouth
    pipx install glances
    pipx install ipython
    pipx inject ipython friendly colorama pickleshare
    pipx install norwegianblue
    pipx install peplum
    pipx install pdm
    pipx install pip-audit
    pipx install pip-check
    pipx install pispy-client
    pipx install poetry
    pipx inject poetry poetry-plugin-export
    pipx inject poetry poetry-plugin-shell
    pipx install posting --python python3.12
    pipx install pydf
    pipx install pyright
    pipx install thonny
    pipx install tldr

}
pipxforceinstall () {
    pipx install --force argcomplete
    pipx install --force frogmouth
    pipx install --force glances
    pipx install --force ipython
    pipx inject ipython friendly colorama pickleshare
    pipx install --force norwegianblue
    pipx install --force peplum
    pipx install --force pdm
    pipx install --force pip-audit
    pipx install --force pip-check
    pipx install --force pispy-client
    pipx install --force poetry
    pipx inject poetry poetry-plugin-export
    pipx inject poetry poetry-plugin-shell
    pipx install --force posting --python python3.12
    pipx install --force pydf
    pipx install --force pyright
    pipx install --force thonny
    pipx install --force tldr

}

pipx-outdated() {
    # See: https://github.com/pypa/pipx/issues/149#issuecomment-23427482060
	echo "OUTDATED PACKAGES:"
	while read -sr pyPkgName pyPkgVersion; do
        pyPkgURL="https://pypi.org/pypi/${pyPkgName}/json"
		pypi_latest="$(curl -sS "${pyPkgURL}" | jq --raw-output '.info.version')"
		[ "$pyPkgVersion" != "$pypi_latest" ] && printf "%s\n\tCurrent: %s\tLatest: %s\n" "$pyPkgName" "$pyPkgVersion" "$pypi_latest"
	done < <( pipx list | grep -o 'package.*,' | tr -d ',' | cut -d ' ' -f 2- )
}

chkfont () {
    for family in serif sans-serif monospace Arial Helvetica Verdana "Times New Roman" "Courier New"; do
  echo -n "$family: "
  fc-match "$family"
done
}
cxfile () {
    # Create an executable file and edit created file
    touch "$1" && chmod +x "$_" && vi "$_" || return
}

dictw () {
    echo
    def="$(curl -s dict://dict.org/define:"$1": | grep -vP '^\d\d\d')";
    if [ "$def" = "" ];
    then
        echo No definition available;
    else
        echo "$def" | bat -p --theme "Solarized (light)";
    fi
}

find_largest_file() {
    du -h -x -s -- * | sort -r -h | head -20;
}

xf_change () {
# toggle light/dark xfce4-terminal themes
  xf_set () { #xfce
    xfconf-query -c "xfce4-terminal" -p "/$1" -s "$2"
  }
if [ "$(basename "$1")" = "mode-dark" ]
then
  xf_set "color-foreground" "#839496"
  xf_set "color-background" "#002b36"
  xf_set "color-cursor"     "#93a1a1"
  xf_set "color-bold"       "#93a1a1"
else
  xf_set "color-foreground" "#073642"
  xf_set "color-background" "#fdf6e3"
  xf_set "color-cursor"     "#073642"
  xf_set "color-bold"       "#073642"
fi
}
